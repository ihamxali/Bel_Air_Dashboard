import React, { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';
import { Users, DollarSign, Clock, TrendingUp, Star, ShoppingCart } from 'lucide-react';

const RestaurantDashboard = () => {
  // Sample data simulating restaurant operations
  const [dashboardData, setDashboardData] = useState({
    // Peak hours analysis
    hourlyData: [
      { hour: '11:00', orders: 12, revenue: 340 },
      { hour: '12:00', orders: 28, revenue: 780 },
      { hour: '13:00', orders: 35, revenue: 950 },
      { hour: '18:00', orders: 45, revenue: 1250 },
      { hour: '19:00', orders: 52, revenue: 1420 },
      { hour: '20:00', orders: 48, revenue: 1380 },
      { hour: '21:00', orders: 32, revenue: 890 }
    ],
    
    // Popular dishes analysis
    dishPerformance: [
      { name: 'Chicken Tikka Masala', orders: 145, revenue: 2175, margin: 0.65 },
      { name: 'Lamb Biryani', orders: 98, revenue: 1960, margin: 0.58 },
      { name: 'Vegetable Curry', orders: 87, revenue: 1044, margin: 0.72 },
      { name: 'Naan Bread', orders: 230, revenue: 920, margin: 0.80 },
      { name: 'Mango Lassi', orders: 76, revenue: 380, margin: 0.75 }
    ],
    
    // Customer demographics (age groups)
    demographics: [
      { age: '18-25', count: 45, percentage: 22 },
      { age: '26-35', count: 68, percentage: 34 },
      { age: '36-45', count: 52, percentage: 26 },
      { age: '46-60', count: 28, percentage: 14 },
      { age: '60+', count: 8, percentage: 4 }
    ],
    
    // Weekly trends
    weeklyTrends: [
      { day: 'Mon', orders: 85, revenue: 2340, avgSpend: 27.5 },
      { day: 'Tue', orders: 92, revenue: 2580, avgSpend: 28.0 },
      { day: 'Wed', orders: 78, revenue: 2190, avgSpend: 28.1 },
      { day: 'Thu', orders: 105, revenue: 2940, avgSpend: 28.0 },
      { day: 'Fri', orders: 145, revenue: 4350, avgSpend: 30.0 },
      { day: 'Sat', orders: 168, revenue: 5208, avgSpend: 31.0 },
      { day: 'Sun', orders: 134, revenue: 3886, avgSpend: 29.0 }
    ]
  });

  const [selectedMetric, setSelectedMetric] = useState('revenue');
  const [timeFrame, setTimeFrame] = useState('week');

  // KPI calculations
  const totalOrders = dashboardData.weeklyTrends.reduce((sum, day) => sum + day.orders, 0);
  const totalRevenue = dashboardData.weeklyTrends.reduce((sum, day) => sum + day.revenue, 0);
  const avgOrderValue = totalRevenue / totalOrders;
  const peakHour = dashboardData.hourlyData.reduce((max, hour) => 
    hour.orders > max.orders ? hour : max, dashboardData.hourlyData[0]);

  const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#8dd1e1'];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">üçõ Bel Air Tandoori Analytics</h1>
          <p className="text-gray-600">Business Intelligence Dashboard - Restaurant Performance Insights</p>
        </div>

        {/* KPI Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Orders</p>
                <p className="text-2xl font-bold text-gray-800">{totalOrders}</p>
                <p className="text-xs text-green-600">‚ÜóÔ∏è +12% vs last week</p>
              </div>
              <ShoppingCart className="h-8 w-8 text-blue-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Revenue</p>
                <p className="text-2xl font-bold text-gray-800">‚Ç¨{totalRevenue.toLocaleString()}</p>
                <p className="text-xs text-green-600">‚ÜóÔ∏è +8% vs last week</p>
              </div>
              <DollarSign className="h-8 w-8 text-green-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-yellow-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Avg Order Value</p>
                <p className="text-2xl font-bold text-gray-800">‚Ç¨{avgOrderValue.toFixed(2)}</p>
                <p className="text-xs text-red-600">‚ÜòÔ∏è -2% vs last week</p>
              </div>
              <TrendingUp className="h-8 w-8 text-yellow-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-purple-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Peak Hour</p>
                <p className="text-2xl font-bold text-gray-800">{peakHour.hour}</p>
                <p className="text-xs text-gray-600">{peakHour.orders} orders</p>
              </div>
              <Clock className="h-8 w-8 text-purple-500" />
            </div>
          </div>
        </div>

        {/* Charts Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {/* Hourly Performance */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Clock className="mr-2 h-5 w-5 text-blue-500" />
              Peak Hours Analysis
            </h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={dashboardData.hourlyData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="hour" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="orders" fill="#8884d8" name="Orders" />
                <Bar dataKey="revenue" fill="#82ca9d" name="Revenue (‚Ç¨)" />
              </BarChart>
            </ResponsiveContainer>
          </div>

          {/* Customer Demographics */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Users className="mr-2 h-5 w-5 text-green-500" />
              Customer Demographics
            </h3>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={dashboardData.demographics}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ age, percentage }) => `${age}: ${percentage}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="count"
                >
                  {dashboardData.demographics.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Weekly Trends */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <TrendingUp className="mr-2 h-5 w-5 text-purple-500" />
            Weekly Performance Trends
          </h3>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={dashboardData.weeklyTrends}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="day" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="orders" stroke="#8884d8" strokeWidth={3} name="Orders" />
              <Line type="monotone" dataKey="revenue" stroke="#82ca9d" strokeWidth={3} name="Revenue (‚Ç¨)" />
              <Line type="monotone" dataKey="avgSpend" stroke="#ffc658" strokeWidth={3} name="Avg Spend (‚Ç¨)" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Menu Performance Analysis */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Star className="mr-2 h-5 w-5 text-orange-500" />
            Menu Performance Analysis
          </h3>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b-2">
                  <th className="text-left p-3">Dish Name</th>
                  <th className="text-right p-3">Orders</th>
                  <th className="text-right p-3">Revenue (‚Ç¨)</th>
                  <th className="text-right p-3">Profit Margin</th>
                  <th className="text-right p-3">Performance</th>
                </tr>
              </thead>
              <tbody>
                {dashboardData.dishPerformance.map((dish, index) => (
                  <tr key={index} className="border-b hover:bg-gray-50">
                    <td className="p-3 font-medium">{dish.name}</td>
                    <td className="p-3 text-right">{dish.orders}</td>
                    <td className="p-3 text-right">‚Ç¨{dish.revenue}</td>
                    <td className="p-3 text-right">
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        dish.margin > 0.7 ? 'bg-green-100 text-green-800' :
                        dish.margin > 0.6 ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {(dish.margin * 100).toFixed(0)}%
                      </span>
                    </td>
                    <td className="p-3 text-right">
                      <div className="flex items-center justify-end">
                        <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                          <div 
                            className="bg-blue-500 h-2 rounded-full" 
                            style={{width: `${(dish.orders / 230) * 100}%`}}
                          ></div>
                        </div>
                        <span className="text-xs text-gray-600">
                          {((dish.orders / 230) * 100).toFixed(0)}%
                        </span>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Business Recommendations */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl shadow-lg p-6 text-white">
          <h3 className="text-xl font-bold mb-4">üéØ Business Intelligence Recommendations</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white/10 rounded-lg p-4">
              <h4 className="font-semibold mb-2">Peak Hour Optimization</h4>
              <p className="text-sm">Staff more servers during 7-8 PM when orders peak at 52. Consider happy hour promotions during slower 11 AM - 12 PM period.</p>
            </div>
            <div className="bg-white/10 rounded-lg p-4">
              <h4 className="font-semibold mb-2">Menu Strategy</h4>
              <p className="text-sm">Promote Naan Bread (80% margin) and Vegetable Curry (72% margin). Consider bundling with lower-margin items.</p>
            </div>
            <div className="bg-white/10 rounded-lg p-4">
              <h4 className="font-semibold mb-2">Customer Targeting</h4>
              <p className="text-sm">Focus marketing on 26-35 age group (34% of customers). Weekend promotions for families could increase Saturday revenue.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RestaurantDashboard;
